[tool.poetry]
name = "bee-python-sdk"
version = "0.1.0"
description = ""
authors = ["IBM Corp."]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
openai = "^1.47.0"
requests = "^2.32.3"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
poethepoet = "^0.28.0"
python-dotenv = "^1.0.1"
pytest-dotenv = "^0.5.2"
ruff = "^0.6.7"
pytest-xdist = "^3.6.1"
pre-commit = "^4.0.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = "-v"
testpaths = ["tests"]
markers = [ "e2e" ]
env_files = [ ".env" ]

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [# See docs for available rules: https://docs.astral.sh/ruff/rules
    "B", # bugbear (assignment to os.environ, assert False, ...)
    "C", # mccabe (too complex structures, ...)
    "E", # error (line too long, syntax error, ...)
    "F", # pyflakes (unused imports, variables, ...)
    "I", # isort
    "W", # pycodestyle (indentation, whitespace, ...)
    "T20", # flake8-print (print found, pprint found, ...)
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.per-file-ignores]
"examples/**/*.py" = ["T201", "T203", "B904"] # Examples can include print and pprint, ignore exception propagation
"examples/*.py" = ["T201", "T203", "B904"] # Examples can include print and pprint, ignore exception propagation

[tool.ruff.lint.isort]
known-first-party = ["bee_automations"]

[tool.poe.tasks.format]
help = "Run all formating tools"
sequence = [
    { "cmd" = "ruff format" }, # format code
    { "cmd" = "ruff check --select I --fix" } # sort imports
]

[tool.poe.tasks.lint]
help = "Check for errors and fix them using ruff (includes isort)"
cmd = "ruff check --fix"




[tool.poe.tasks.test]
help = "Run all examples"
cmd = "pytest -m 'e2e' -n 5"
